package ru.yandex.practicum.filmorate.model;

import lombok.*;
import net.bytebuddy.utility.dispatcher.JavaDispatcher;

import javax.validation.constraints.*;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

@Getter
@Setter
public class User {
    private long id;
    private Set<Integer> friends;

    @NotBlank(message = "email cannot be empty")
    @Email(message = "must contain the @ symbol")
    private String email;

    @NotBlank(message = "login cannot be empty and contain spaces")
    private String login;

    private String name;

    @Past(message = "date of birth cannot be in the future")
    private LocalDate birthday;

    public Set<Integer> getFriends() {
        return friends;
    }

    public User() {

    }
    public void setFriends(Set<Integer> friends) {
        this.friends = friends;
    }
    public Map<String,Object> toMap() {
        Map<String, Object> values = new HashMap<>(4);
        values.put("name", name);
        values.put("birthday", birthday);
        values.put("login", login);
        values.put("email", email);
        return values;
    }

/*    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR,
    birthday DATE,
    login VARCHAR
    CONSTRAINT birthday_not_in_future CHECK (birthday < CAST(NOW() AS DATE))*/
}
